"use strict";angular.module("musetrapApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","ngTouch","ui.select","pascalprecht.translate","toastr","as.sortable"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main"}).when("/about",{templateUrl:"views/about.html",controller:"AboutCtrl",controllerAs:"about"}).when("/feedback",{templateUrl:"views/feedback.html",controller:"FeedbackCtrl",controllerAs:"feedback"}).otherwise({redirectTo:"/"})}]).config(["$translateProvider","$translatePartialLoaderProvider",function(a,b){b.addPart("app/ui"),b.addPart("recipes"),b.addPart("ingredient_bundles"),a.useLoader("$translatePartialLoader",{urlTemplate:"i18n/{part}_{lang}.json"}),a.useSanitizeValueStrategy("sanitizeParameters"),a.preferredLanguage("en"),a.fallbackLanguage("en")}]).run(["$rootScope","$translate",function(a,b){a.$on("$translatePartialLoaderStructureChanged",function(){b.refresh()})}]),angular.module("musetrapApp").controller("MainCtrl",["$scope","DataFactory","NotificationFactory","$translate",function(a,b,c,d){a.recipeResults=[],a.createRecipe=function(e){var f=b.getIngredients(e);f.then(function(b){var c=[];angular.forEach(b,function(a){var b=_.sample(a.data);c=c.concat(b)});var d={ingredients:c};a.recipeResults.unshift(d)},function(){c.error(d.instant("errors.create_recipe"))})}}]),angular.module("musetrapApp").controller("AboutCtrl",["$scope","$translate",function(a,b){a.getAboutContent=function(){var a=b.proposedLanguage()||b.use();return"views/about_"+a+".html"}}]),angular.module("musetrapApp").factory("DataFactory",["$http","$q","NotificationFactory","$translate",function a(b,c,d,e){return a.availableBundles=[],a.availableLanguages=[],a.availableRecipes=[],a.getIngredients=function(a){var d=[];return angular.forEach(a,function(a){d.push(b.get("data/ingredient_bundles/"+a+".json"))}),c.all(d)},a.getAvailableRecipes=function(){return b.get("data/recipes.json",{cache:!0}).then(function(b){a.availableRecipes=b.data},function(){d.error(e.instant("errors.get_available_recipes"))})},a.getAvailableBundles=function(){return b.get("metadata.json",{cache:!0}).then(function(b){a.availableBundles=b.data.availableBundles},function(){d.error(e.instant("errors.get_available_bundles"))})},a.getAvailableLanguages=function(){return b.get("metadata.json",{cache:!0}).then(function(b){a.availableLanguages=b.data.availableLanguages},function(){d.error(e.instant("errors.get_available_languages"))})},a}]),angular.module("musetrapApp").controller("ConfigurationCtrl",["$scope","DataFactory","$translatePartialLoader",function(a,b,c){a.mode="normal",a.availableRecipes=[],a.bundles={},a.bundles.available=[],a.bundles.selected=[],a.bundles.removed=[],a.recipe={},a.sortableAvailableBundles={clone:!0,dragStart:function(){a.sortableSelectedBundles.showEmptyState=!1},dragEnd:function(){a.sortableSelectedBundles.showEmptyState=!0}},a.sortableSelectedBundles={showDropZone:!1,showEmptyState:!0,allowDuplicates:!0,dragStart:function(){a.sortableSelectedBundles.showDropZone=!0},dragEnd:function(){a.sortableSelectedBundles.showDropZone=!1}},a.sortableRemoveBundles={},a.$watchCollection("bundles.selected",function(a){a.forEach(function(a){c.addPart("ingredient_bundles/"+a)})}),b.getAvailableBundles().then(function(){a.bundles.available=b.availableBundles}),b.getAvailableRecipes().then(function(){a.availableRecipes=b.availableRecipes}),a.changeSelectedRecipe=function(b){b?a.bundles.selected=angular.copy(b.ingredient_bundles):(a.bundles.selected=[],a.recipe={})},a.toggleMode=function(){"normal"===a.mode?a.mode="tweak":a.mode="normal"},a.clearSelectedBundles=function(){a.bundles.selected=[]},a.bundleTracking=function(a,b){return a+b}}]),angular.module("musetrapApp").filter("recipeSearchFilter",["$translate",function(a){return function(b,c){var d=[];return angular.isArray(b)&&b.forEach(function(b){var e=!1,f=b.id,g=a.instant(f+".name"),h=a.instant(f+".description"),i=c.toLowerCase();(-1!==g.toString().toLowerCase().indexOf(i)||-1!==h.toString().toLowerCase().indexOf(i))&&(e=!0),e&&d.push(b)}),d}}]),angular.module("musetrapApp").controller("FooterCtrl",["$scope","$translate","$location","DataFactory",function(a,b,c,d){a.location={active:""},a.$on("$locationChangeSuccess",function(){a.location.active=c.path()}),a.availableLanguages=[],a.selectedLanguage=void 0;var e=b.onReady();e.then(function(){a.selectedLanguage=b.use()}),d.getAvailableLanguages().then(function(){a.availableLanguages=d.availableLanguages}),a.changeLanguage=function(c){a.selectedLanguage=c,b.use(c)}}]),angular.module("musetrapApp").factory("NotificationFactory",["toastr",function b(a){return b.error=function(b){a.error(b)},b.success=function(b){a.success(b)},b}]),angular.module("musetrapApp").filter("translateArray",["$translate",function(a){return function(b){var c="";if(angular.isArray(b)){var d=0;for(d;d<b.length;d++){var e=b[d],f=a.instant(e);c+=f,d<b.length-1&&(c+=", ")}}return c}}]),angular.module("musetrapApp").controller("FeedbackCtrl",["$scope","$http","$translate","$httpParamSerializer","NotificationFactory",function c(a,b,d,e,f){a.feedback={},a.submittedForm=!1,c.formUrl="http://formspree.io/netrunner+musetrap@gmail.com",a.processForm=function(g){a.submitted=!0,g?b({method:"POST",url:c.formUrl,data:e(a.feedback),headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded"}}).then(function(){f.success(d.instant("feedback.submit_form_success"))},function(){f.error(d.instant("feedback.submit_form_error"))}):(a.submittedForm=!0,f.error(d.instant("feedback.submit_form_invalid")))}}]),angular.module("musetrapApp").run(["$templateCache",function(a){a.put("views/about.html",'<div ng-include="getAboutContent()"></div>'),a.put("views/about_en.html",'<h3>What is this?</h3> <p>Musetrap is a tool to provide prompts to ignite your inspiration.</p> <h3>Wait. What? Another prompt generator?</h3> <p>Yes. I am building this mostly for myself, but I think it has potential to become useful to other people.</p> <h3>Who are you?</h3> <p><a href="http://excentris.net">Eduardo Rubio</a></p> <h3>Why?</h3> <p>Because sometimes I find myself wasting time thinking about what to draw instead of just drawing, and wanted to something about it. And because I like to create software and wanted to learn something new (if you are interested in the details head over to <a href="https://github.com/excentris/musetrap">GitHub</a>).</p> <h3>How does it work?</h3> <p>At its core Musetrap simply generates a pseudo-random list of words. Those words or "ingredients" form different "bundles" like <em>animals</em>, <em>colors</em>, <em>emotions</em>, etc. and are used in "recipes".</p> <p>A "recipe" is a routine that selects ingredients from the different bundles based on some configuration. For example, the <em>Animal warrior</em> recipe selects a random ingredient from the <em>animals</em> bundle and another one from the <em>weapons</em> bundle.</p> <p>The resulting combinations are meant to spawn ideas just by thinking about them. Be as literal or as figurative as you want while exploring the meaning of the words and the (sometimes bizarre) combinations.</p> <h3>And now what?</h3> <p>Well, I\'ve got lots of ideas to keep extending and improving Musetrap. More configuration options, more bundles, more translations...</p> <p>Suggestions are welcome. Also, Musetrap is open source, so if you want to help improve it, head over to the <a href="https://github.com/excentris/musetrap">GitHub repository</a>.</p> <p><em>Keep the muses by your side!</em></p>'),a.put("views/about_es.html",'<h3>¿Qué es esto?</h3> <p>Musetrap es una herramienta para generar sugerencias que alimenten tu inspiración.</p> <h3>Espera un momento. ¿Otro generador de ideas?</h3> <p>Pues sí, más o menos. Estoy creando esto para uso propio, pero creo que tiene potencial para serle útil a otros.</p> <h3>¿Y tú quién eres?</h3> <p><a href="http://excentris.net">Eduardo Rubio</a></p> <h3>¿Por qué?</h3> <p>Pues porque a veces paso más tiempo pensando en qué dibujar que el tiempo que paso dibujando y quería cambiar eso. Y porque me gusta programar y quería aprender algo nuevo (si te interesan los detalles pásate por <a href="https://github.com/excentris/musetrap">GitHub</a>).</p> <h3>¿Cómo funciona?</h3> <p>Básicamente Musetrap genera listas de palabras pseudo-aleatorias. Esas palabras o "ingredientes" forman "conjuntos" como <em>animales</em>, <em>colores</em>, <em>emociones</em>, etc. y se usan en "recetas".</p> <p>Una "receta" es una serie de instrucciones que selecciona ingredientes de diferentes conjuntos siguiendo una configuración predeterminada. Por ejemplo, la receta <em>Guerrero animal</em> selecciona un ingrediente del conjunto <em>animales</em> y otro del conjunto <em>armas</em>.</p> <p>Las combinaciones resultantes pretenden incentivar la creación de ideas simplemente pensando en ellas. Explora las palabras en sentido literal o en sentido figurado e intenta encontrar inspiración en las (en ocasiones extravagantes) combinaciones.</p> <h3>¿Y ahora qué?</h3> <p>Tengo muchas ideas para seguir mejorando Musetrap. Más opciones de configuración, más ingredientes, más traducciones...</p> <p>Las sugerencias son bienvenidas. Además, Musetrap es código abierto, así que si quieres ayudar a mejorarlo pásate por <a href="https://github.com/excentris/musetrap">el repositorio en GitHub</a>.</p> <p><em>Las musas siempre a tu lado!</em></p>'),a.put("views/feedback.html",'<h3>{{ \'feedback.title\' | translate }}</h3> <p>{{ \'feedback.text\' | translate }}</p> <form name="feedbackForm" ng-submit="processForm(feedbackForm.$valid)" novalidate> <div class="form-group" ng-class="{ \'has-error\': feedbackForm.name.$invalid && submitted }"> <input name="name" class="form-control" id="inputName" placeholder="{{\'feedback.feedback_name_placeholder\' | translate}}" type="text" ng-model="feedback.name" required> </div> <div class="form-group" ng-class="{ \'has-error\': feedbackForm.email.$invalid && submitted }"> <input name="email" class="form-control" id="inputEmail" placeholder="{{\'feedback.feedback_email_placeholder\' | translate}}" type="email" ng-model="feedback.email" ng-model-options="{ updateOn: \'blur\' }" required> </div> <div class="form-group" ng-class="{ \'has-error\': feedbackForm.message.$invalid && submitted }"> <textarea name="message" class="form-control" rows="6" ng-model="feedback.message" placeholder="{{\'feedback.feedback_message_placeholder\' | translate}}" required></textarea> </div> <button class="btn btn-default feedbackFormSubmit" type="submit">{{ \'submit_button_text\' | translate }}</button> </form>'),a.put("views/footer.html",'<div class="container"> <div class="footer-container"> <div class="row"> <nav> <div class="container-fluid"> <div class="btn-group" role="group"> <ul id="navigation-menu" class="nav nav-pills"> <li role="presentation" ng-class="{\'active\': \'/\' == location.active}"> <a ng-href="#/" translate="nav_home"></a> </li> <li role="presentation" ng-class="{\'active\': \'/about\' == location.active}"> <a ng-href="#/about" translate="nav_about"></a> </li> <li role="presentation" ng-class="{\'active\': \'/feedback\' == location.active}"> <a ng-href="#/feedback" translate="nav_feedback"></a> </li> </ul> </div> <div class="language-select-container navbar-right" role="group"> <ui-select class="language-select" ng-model="selectedLanguage" theme="bootstrap" on-select="changeLanguage($item)" skip-focusser="true"> <ui-select-match placeholder="{{\'lang_selector_placeholder\' | translate}}">{{ \'button_lang_\'+$select.selected | translate }}</ui-select-match> <ui-select-choices class="language-choices" repeat="language in availableLanguages | filter: $select.search" position="up"> <span ng-bind-html="\'button_lang_\'+language | translate | highlight: $select.search"></span> </ui-select-choices> </ui-select> </div> </div> </nav> </div> </div> </div>'),a.put("views/main.html",'<div class="controls-container" ng-controller="ConfigurationCtrl"> <div class="row"> <div class="input-group recipe-select-tweak"> <ui-select class="recipe-select" ng-disabled="disabled" ng-model="recipe.selected" on-select="changeSelectedRecipe($item)" theme="bootstrap" skip-focusser="true"> <ui-select-match allow-clear="true" placeholder="{{\'recipe_selector_placeholder\' | translate}}">{{$select.selected.id+\'.name\' | translate}}</ui-select-match> <ui-select-choices class="recipe-choices" repeat="recipe in availableRecipes | recipeSearchFilter: $select.search"> <div ng-bind-html="recipe.id+\'.name\' | translate | highlight: $select.search"></div> <small> <span translate>recipe_description_label</span>: <span ng-bind-html="\'\'+recipe.id+\'.description\' | translate | highlight: $select.search"></span> <br> <span translate>recipe_ingredient_bundles_label</span>: <span>{{ recipe.ingredient_bundles | translateArray }}</span> </small> </ui-select-choices> </ui-select> <span class="input-group-btn recipe-tweak"> <button class="btn btn-default" ng-class="{\'active\': mode == \'tweak\'}" ng-click="toggleMode()" type="button"> <span aria-hidden="true" class="glyphicon glyphicon-cog"></span> {{\'button_tweak\' | translate }} </button> </span> </div> </div> <div class="row recipe-description-container"> <div class="recipe-description text-muted" ng-show="recipe.selected">{{recipe.selected.id+\'.description\' | translate}}</div> </div> <div class="row home-empty-state text-muted home-empty-state-container" ng-show="mode === \'normal\' && recipeResults.length === 0 && !recipe.selected"> <span aria-hidden="true" class="glyphicon glyphicon-info-sign"></span>{{ \'empty_state.home\' | translate }} </div> <div class="row bundle-selection-container" ng-show="mode === \'tweak\'"> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title available-bundles-title">{{ \'available_bundles_title\' | translate }}</h3> </div> <div as-sortable="sortableAvailableBundles" class="panel-body available-bundles-container" ng-model="bundles.available"> <span as-sortable-item class="label label-ingredient label-default" ng-repeat="(bundleIndex, bundleId) in bundles.available track by bundleTracking(bundleIndex, bundleId)"> <div as-sortable-item-handle class="noselect">{{bundleId | translate}}</div> </span> </div> </div> <div class="panel panel-default"> <div class="panel-heading"> <div class="btn-group pull-right clear-selected-bundles-button" ng-show="bundles.selected.length > 0" ng-click="clearSelectedBundles()" title="{{ \'clear_selected_bundles_button_title\' | translate }}"> <span aria-hidden="true" class="glyphicon glyphicon-trash"></span> </div> <h3 class="panel-title selected-bundles-title">{{ \'selected_bundles_title\' | translate }}</h3> </div> <div as-sortable="sortableSelectedBundles" class="panel-body selected-bundles-container" ng-model="bundles.selected"> <span class="selected-bundles-empty-state text-muted" ng-show="bundles.selected.length === 0 && sortableSelectedBundles.showEmptyState === true"><span aria-hidden="true" class="glyphicon glyphicon-info-sign"></span>{{ \'empty_state.selected_bundles\' | translate }}</span> <span as-sortable-item class="label label-ingredient label-default" ng-repeat="(bundleIndex, bundleId) in bundles.selected track by bundleTracking(bundleIndex, bundleId)"> <div as-sortable-item-handle class="noselect">{{bundleId | translate}}</div> </span> </div> </div> <div as-sortable="sortableRemoveBundles" class="well drop-zone" ng-model="bundles.removed" ng-show="sortableSelectedBundles.showDropZone"> <span aria-hidden="true" class="glyphicon glyphicon-trash"></span> </div> </div> <div class="row" ng-show="recipe.selected || (bundles.selected.length > 0 && mode === \'tweak\')"> <div class="col-lg-8 col-lg-offset-2 inspire-button-container"> <a class="btn btn-lg btn-primary" ng-click="createRecipe(bundles.selected)" ng-href="#/">{{ \'inspire_button_text\' | translate }}</a> </div> </div> </div> <div class="row recipe-result-container" ng-show="recipeResults.length > 0"> <div class="panel panel-primary"> <div class="panel-heading"> <h3 class="panel-title recipe-results-title">{{ \'recipe_results_title\' | translate }}</h3> </div> <div class="panel-body"> <div class="recipe-result" ng-class="{\'latest-recipe-result\': recipeResultIndex === 0}" ng-repeat="(recipeResultIndex, recipeResult) in recipeResults"> <span class="label label-ingredient" ng-class="recipeResultIndex === 0 ? \'label-primary\' : \'label-faded\'" ng-repeat="ingredient in recipeResult.ingredients track by $index" translate>{{ingredient}}</span> </div> </div> </div> </div>')}]);